<% layout('./layouts/boilerplate') %>

<div class="container mt-5">
    <!-- Image Gallery -->
    <div class="row mb-4">
        <div class="col-12">
            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-indicators">
                    <% if (listing.images && listing.images.length > 0) { %>
                        <% listing.images.forEach((img, index) => { %>
                            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="<%= index %>" 
                                    class="<%= index === 0 ? 'active' : '' %>"
                                    aria-current="<%= index === 0 ? 'true' : 'false' %>" 
                                    aria-label="Slide <%= index + 1 %>"></button>
                        <% }); %>
                    <% } %>
                </div>
                <div class="carousel-inner">
                    <% if (listing.images && listing.images.length > 0) { %>
                        <% listing.images.forEach((img, index) => { %>
                            <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                                <img src="<%= img.url %>" class="d-block w-100" alt="<%= listing.title %>" style="height: 500px; object-fit: cover;">
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="carousel-item active">
                            <img src="/logo3.png" class="d-block w-100" alt="<%= listing.title %>" style="height: 500px; object-fit: cover;">
                        </div>
                    <% } %>
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Listing Details -->
        <div class="col-lg-8">
            <div class="card mb-4 border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <h2 class="card-title mb-0"><%= listing.title %></h2>
                        <div class="d-flex align-items-center">
                            <% if (listing.rating) { %>
                                <div class="me-2">
                                    <i class="fas fa-star text-warning"></i>
                                    <span><%= listing.rating %></span>
                                </div>
                            <% } %>
                            <% if (listing.reviews && listing.reviews.length > 0) { %>
                                <span class="text-muted">(<%= listing.reviews.length %> reviews)</span>
                            <% } %>
                            <% if (currUser && currUser._id.equals(listing.owner._id)) { %>
                                <div class="ms-3 d-flex gap-2">
                                    <a href="/listings/<%= listing._id %>/edit" class="glass-btn edit-btn">
                                        <i class="fas fa-edit me-1"></i> Edit
                                    </a>
                                    <button class="glass-btn delete-btn" onclick="deleteListing('<%= listing._id %>')">
                                        <i class="fas fa-trash me-1"></i> Delete
                                    </button>
                                </div>
                            <% } %>
                        </div>
                    </div>
                    
                    <p class="text-muted mb-3">
                        <i class="fas fa-map-marker-alt me-2"></i>
                        <%= listing.location %>, <%= listing.country %>
                    </p>
                    
                    <div class="d-flex flex-wrap gap-3 mb-4">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-user me-2"></i>
                            <span>Hosted by <%= listing.owner.username %></span>
                        </div>
                        <div class="d-flex align-items-center">
                            <i class="fas fa-home me-2"></i>
                            <span><%= listing.category %></span>
                        </div>
                        <% if (listing.maxGuests) { %>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-users me-2"></i>
                                <span>Up to <%= listing.maxGuests %> guests</span>
                            </div>
                        <% } %>
                    </div>
                    
                    <hr>
                    
                    <h5 class="mb-3">About this place</h5>
                    <p><%= listing.description %></p>
                    
                    <!-- Map Section -->
                    <div class="mt-4">
                        <h5 class="mb-3">Location</h5>
                        <div id="map" style="height: 400px; border-radius: 12px;"></div>
                    </div>
                </div>
            </div>
            
            <!-- Reviews Section -->
            <div class="reviews-section mt-5">
                <h3>Reviews</h3>
                <% if (listing.reviews && listing.reviews.length > 0) { %>
                    <% listing.reviews.forEach(review => { %>
                        <div class="review-card mb-4 p-3 border rounded">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h5><%= review.author.username %></h5>
                                    <div class="rating">
                                        <% for(let i = 0; i < review.rating; i++) { %>
                                            <i class="fas fa-star text-warning"></i>
                                        <% } %>
                                    </div>
                                </div>
                                <small class="text-muted"><%= new Date(review.date).toLocaleDateString() %></small>
                            </div>
                            <p class="mt-2"><%= review.body %></p>
                            
                            <% if (review.reply) { %>
                                <div class="reply-section mt-3 p-3 bg-light rounded">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">Host's Reply</h6>
                                        <small class="text-muted"><%= new Date(review.replyDate).toLocaleDateString() %></small>
                                    </div>
                                    <p class="mt-2 mb-0"><%= review.reply %></p>
                                </div>
                            <% } else if (currUser && currUser._id.equals(listing.owner._id)) { %>
                                <form action="/listings/<%= listing._id %>/reviews/<%= review._id %>/reply" method="POST" class="mt-3">
                                    <div class="form-group">
                                        <textarea name="reply" class="form-control" rows="2" placeholder="Write a reply..." required></textarea>
                                    </div>
                                    <button type="submit" class="btn btn-primary btn-sm mt-2">Reply</button>
                                </form>
                            <% } %>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p>No reviews yet.</p>
                <% } %>
            </div>
        </div>
        
        <!-- Booking Form -->
        <div class="col-lg-4">
            <div class="card border-0 shadow-sm sticky-top" style="top: 20px;">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0">â‚¹<%= listing.price %></h5>
                        <span class="text-muted">per night</span>
                    </div>
                    
                    <div class="booking-form-container">
                        <form id="booking-form" class="booking-form">
                            <div class="mb-3">
                                <label for="checkIn" class="form-label">Check-in Date</label>
                                <input type="date" class="form-control" id="checkIn" name="checkIn" required>
                            </div>
                            <div class="mb-3">
                                <label for="checkOut" class="form-label">Check-out Date</label>
                                <input type="date" class="form-control" id="checkOut" name="checkOut" required>
                            </div>
                            <div class="mb-3">
                                <label for="guests" class="form-label">Number of Guests</label>
                                <input type="number" class="form-control" id="guests" name="guests" min="1" max="<%= listing.maxGuests || 10 %>" required>
                            </div>
                            
                            <div class="price-details" style="display: none;">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Total Amount:</span>
                                    <span id="total-amount">â‚¹0</span>
                                </div>
                            </div>

                            <button type="submit" class="glass-btn book-now-btn w-100" id="pay-now">
                                <i class="fas fa-calendar-check me-1"></i> Book Now
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Flash Message Container -->
<div id="flashMessage" class="position-fixed top-0 end-0 p-3" style="z-index: 1050; display: none;">
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto" id="flashTitle">Notification</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="flashMessage">
        </div>
    </div>
</div>

<!-- Razorpay Script -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
    // Flash message function
    function showFlashMessage(message, type = 'info') {
        const flashContainer = document.getElementById('flashMessage');
        const toast = flashContainer.querySelector('.toast');
        const title = document.getElementById('flashTitle');
        const messageEl = document.getElementById('flashMessage');
        
        // Set title and message
        title.textContent = type.charAt(0).toUpperCase() + type.slice(1);
        messageEl.textContent = message;
        
        // Add appropriate classes based on type
        toast.className = 'toast';
        toast.classList.add(`bg-${type}`);
        if (type === 'success' || type === 'danger') {
            toast.classList.add('text-white');
        }
        
        // Center the text
        toast.classList.add('text-center');
        
        // Show the toast
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        // Hide after 5 seconds
        setTimeout(() => {
            bsToast.hide();
        }, 5000);
    }

    // Initialize map
    function initializeMap(coordinates, token) {
        if (!coordinates || !token) return;
        
        mapboxgl.accessToken = token;
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: coordinates,
            zoom: 12
        });
        
        // Add navigation controls
        map.addControl(new mapboxgl.NavigationControl());
        
        // Add marker
        new mapboxgl.Marker()
            .setLngLat(coordinates)
            .addTo(map);
    }

    document.addEventListener('DOMContentLoaded', function() {
        const bookingForm = document.getElementById('booking-form');
        const payNowBtn = document.getElementById('pay-now');
        const startDateInput = document.getElementById('checkIn');
        const endDateInput = document.getElementById('checkOut');
        const guestsInput = document.getElementById('guests');
        const basePrice = Number('<%= listing.price %>');
        const bookedDates = JSON.parse('<%- JSON.stringify(listing.bookedDates || []) %>');

        // Function to check if a date is available
        function isDateAvailable(date) {
            const checkDate = new Date(date);
            return !bookedDates.some(booking => {
                const checkIn = new Date(booking.checkIn);
                const checkOut = new Date(booking.checkOut);
                return checkDate >= checkIn && checkDate <= checkOut;
            });
        }

        // Function to disable unavailable dates
        function disableUnavailableDates() {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            // Set min date to today
            startDateInput.min = today.toISOString().split('T')[0];
            
            // Disable unavailable dates
            const dates = document.querySelectorAll('input[type="date"]');
            dates.forEach(input => {
                input.addEventListener('input', function() {
                    const selectedDate = new Date(this.value);
                    if (!isDateAvailable(selectedDate)) {
                        this.value = '';
                        showFlashMessage('This date is not available', 'danger');
                    }
                });
            });
        }

        function calculateTotalPrice(nights) {
            const total = basePrice * nights;
            document.getElementById('total-amount').textContent = `â‚¹${total.toLocaleString('en-IN')}`;
            document.querySelector('.price-details').style.display = 'block';
            return total;
        }

        function calculateNights(checkIn, checkOut) {
            const start = new Date(checkIn);
            const end = new Date(checkOut);
            const diffTime = Math.abs(end - start);
            return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        }

        // Initialize date inputs
        disableUnavailableDates();

        // Date input handlers
        startDateInput.addEventListener('change', function() {
            const checkIn = this.value;
            if (checkIn) {
                endDateInput.min = checkIn;
                if (endDateInput.value && endDateInput.value < checkIn) {
                    endDateInput.value = checkIn;
                }
                const nights = calculateNights(checkIn, endDateInput.value || checkIn);
                calculateTotalPrice(nights);
            }
        });

        endDateInput.addEventListener('change', function() {
            const checkIn = startDateInput.value;
            const checkOut = this.value;
            if (checkIn && checkOut) {
                const nights = calculateNights(checkIn, checkOut);
                calculateTotalPrice(nights);
            }
        });

        // Button click handler
        payNowBtn.addEventListener('click', function(e) {
            e.preventDefault();
            initializePayment();
        });

        // Initialize payment
        async function initializePayment() {
            try {
                const isUserLoggedIn = '<%= typeof currUser !== "undefined" && currUser ? "true" : "false" %>' === 'true';
                if (!isUserLoggedIn) {
                    showFlashMessage('Please login to book this listing', 'error');
                    return;
                }

                // Get booking details
                const checkIn = document.getElementById('checkIn').value;
                const checkOut = document.getElementById('checkOut').value;
                const guests = parseInt(document.getElementById('guests').value);
                const listingId = '<%= listing._id %>';
                
                // Validate booking details
                if (!checkIn || !checkOut) {
                    showFlashMessage('Please select check-in and check-out dates', 'error');
                    return;
                }
                
                if (isNaN(guests) || guests <= 0) {
                    showFlashMessage('Please enter a valid number of guests', 'error');
                    return;
                }
                
                // Calculate nights and total price
                const nights = calculateNights(checkIn, checkOut);
                if (nights <= 0) {
                    showFlashMessage('Check-out date must be after check-in date', 'error');
                    return;
                }
                
                const totalPrice = calculateTotalPrice(nights);
                if (isNaN(totalPrice) || totalPrice <= 0) {
                    showFlashMessage('Invalid total price calculation', 'error');
                    return;
                }

                // Disable the button and show loading state
                const bookNowBtn = document.getElementById('pay-now');
                bookNowBtn.disabled = true;
                bookNowBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';

                try {
                    // Create order
                    const response = await fetch('/payment/create-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            listingId,
                            checkIn,
                            checkOut,
                            guests,
                            totalPrice
                        })
                    });

                    const data = await response.json();
                    
                    if (!response.ok) {
                        // Display detailed error message from server
                        const errorMessage = data.details || data.error || 'Failed to create order';
                        showFlashMessage(errorMessage, 'error');
                        bookNowBtn.disabled = false;
                        bookNowBtn.innerHTML = 'Book Now';
                        return;
                    }

                    // Initialize Razorpay payment
                    const options = {
                        key: data.key,
                        amount: data.amount,
                        currency: data.currency,
                        name: "Trivinia",
                        description: "Booking Payment",
                        order_id: data.orderId,
                        handler: async function(response) {
                            try {
                                // Handle payment success
                                const successResponse = await fetch('/payment/payment-success', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_signature: response.razorpay_signature,
                                        listingId,
                                        checkIn,
                                        checkOut,
                                        guests,
                                        totalPrice
                                    })
                                });
                                
                                const successData = await successResponse.json();
                                
                                if (successResponse.ok) {
                                    showFlashMessage('Payment successful! Booking confirmed.', 'success');
                                    setTimeout(() => {
                                        window.location.href = successData.redirectUrl || '/bookings';
                                    }, 2000);
                                } else {
                                    throw new Error(successData.error || 'Failed to process payment');
                                }
                            } catch (error) {
                                showFlashMessage(error.message || 'Failed to process payment', 'error');
                                bookNowBtn.disabled = false;
                                bookNowBtn.innerHTML = 'Book Now';
                            }
                        },
                        prefill: {
                            name: '<%= currUser ? currUser.username : "" %>',
                            email: '<%= currUser ? currUser.email : "" %>'
                        },
                        modal: {
                            ondismiss: function() {
                                bookNowBtn.disabled = false;
                                bookNowBtn.innerHTML = 'Book Now';
                            }
                        }
                    };
                    
                    const rzp = new Razorpay(options);
                    rzp.open();
                } catch (error) {
                    showFlashMessage('An error occurred while processing your request', 'error');
                    bookNowBtn.disabled = false;
                    bookNowBtn.innerHTML = 'Book Now';
                }
            } catch (error) {
                console.error('Payment initialization error:', error);
                showFlashMessage(error.message || 'Failed to initialize payment', 'error');
                const bookNowBtn = document.getElementById('pay-now');
                bookNowBtn.disabled = false;
                bookNowBtn.innerHTML = 'Book Now';
            }
        }

        // Handle form submission
        document.getElementById('booking-form').addEventListener('submit', function(e) {
            e.preventDefault();
            initializePayment();
        });

        // Add event listeners to delete buttons
        const deleteListingBtn = document.querySelector('.delete-listing-btn');
        if (deleteListingBtn) {
            deleteListingBtn.addEventListener('click', function(e) {
                e.preventDefault();
                
                if (confirm('Are you sure you want to delete this listing? This action cannot be undone.')) {
                    this.closest('form').submit();
                }
            });
        }

        const deleteReviewBtns = document.querySelectorAll('.delete-review-btn');
        deleteReviewBtns.forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                
                if (confirm('Are you sure you want to delete your review?')) {
                    this.closest('form').submit();
                }
            });
        });

        // Initialize map
        try {
            const coordinates = JSON.parse('<%- JSON.stringify(listing.geometry ? listing.geometry.coordinates : [0, 0]) %>');
            const mapToken = "<%= mapToken %>";
            initializeMap(coordinates, mapToken);
        } catch (error) {
            console.error('Error setting up map:', error);
            showFlashMessage('Error setting up map', 'error');
        }
    });

    function deleteListing(listingId) {
        if (confirm('Are you sure you want to delete this listing? This action cannot be undone.')) {
            fetch(`/listings/${listingId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to delete listing');
                }
                return response.text(); // Change to text() since we're getting a redirect
            })
            .then(() => {
                window.location.href = '/listings';
            })
            .catch(error => {
                console.error('Error:', error);
                showFlashMessage('Failed to delete listing. Please try again.', 'error');
            });
        }
    }
</script>

<style>
    /* Glass Button Styles */
    .glass-btn {
        position: relative;
        padding: 0.6rem 1.2rem;
        font-weight: 500;
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        color: #fff;
        text-decoration: none;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        overflow: hidden;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 120px;
        cursor: pointer;
    }

    .glass-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            45deg,
            transparent,
            rgba(255, 255, 255, 0.1),
            transparent
        );
        transform: translateX(-100%);
        transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .glass-btn:hover::before {
        transform: translateX(100%);
    }

    .glass-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    }

    .glass-btn:active {
        transform: translateY(1px);
    }

    .edit-btn {
        background: linear-gradient(
            135deg,
            rgba(79, 172, 254, 0.2),
            rgba(0, 242, 254, 0.2)
        );
        border: 1px solid rgba(79, 172, 254, 0.3);
    }

    .delete-btn {
        background: linear-gradient(
            135deg,
            rgba(255, 99, 99, 0.2),
            rgba(255, 99, 99, 0.1)
        );
        border: 1px solid rgba(255, 99, 99, 0.3);
    }

    .book-now-btn {
        background: linear-gradient(
            135deg,
            rgba(255, 56, 92, 0.9),
            rgba(227, 28, 95, 0.9)
        );
        border: none;
        backdrop-filter: blur(10px);
        -webkit-backdrop-filter: blur(10px);
        box-shadow: 0 8px 32px rgba(255, 56, 92, 0.3);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .book-now-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 12px 40px rgba(255, 56, 92, 0.4);
    }

    .book-now-btn:active {
        transform: translateY(1px);
    }

    /* Remove old button styles */
    .btn-3d,
    .btn-edit,
    .btn-delete,
    .btn-outline-primary,
    .btn-outline-danger,
    .btn-primary {
        all: unset;
    }

    /* Additional Styles */
    .card {
        border-radius: 12px;
        overflow: hidden;
    }
    
    .carousel-item img {
        border-radius: 12px;
    }
    
    .text-warning {
        color: #FF385C !important;
    }
    
    .sticky-top {
        z-index: 1000;
    }
    
    .review {
        transition: all 0.3s ease;
    }
    
    .review:hover {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 10px;
    }
    
    #map {
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    
    .form-control {
        border-radius: 8px;
        border: 1px solid rgba(0, 0, 0, 0.1);
        padding: 0.8rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: rgba(79, 172, 254, 0.5);
        box-shadow: 0 0 0 0.2rem rgba(79, 172, 254, 0.25);
    }
</style>

